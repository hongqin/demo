.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Treedrawer 3"
.TH Bio::Phylo::Treedrawer 3 "2010-04-09" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::Treedrawer \- Visualizer of tree shapes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::IO 'parse';
\& use Bio::Phylo::Treedrawer;
.Ve
.PP
.Vb 2
\& my $string = '((A:1,B:2)n1:3,C:4)n2:0;';
\& my $tree = parse( -format => 'newick', -string => $string )->first;
.Ve
.PP
.Vb 7
\& my $treedrawer = Bio::Phylo::Treedrawer->new(
\&    -width  => 800,
\&    -height => 600,
\&    -shape  => 'CURVY', # curvogram
\&    -mode   => 'PHYLO', # cladogram
\&    -format => 'SVG'
\& );
.Ve
.PP
.Vb 6
\& $treedrawer->set_scale_options(
\&    -width => '100%',
\&    -major => '10%', # major cross hatch interval
\&    -minor => '2%',  # minor cross hatch interval
\&    -label => 'MYA',
\& );
.Ve
.PP
.Vb 2
\& $treedrawer->set_tree($tree);
\& print $treedrawer->draw;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module prepares a tree object for drawing (calculating coordinates for
nodes) and calls the appropriate format-specific drawer.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Treedrawer constructor.
.Sp
.Vb 9
\& Type    : Constructor
\& Title   : new
\& Usage   : my $treedrawer = Bio::Phylo::Treedrawer->new(
\&               %args 
\&           );
\& Function: Initializes a Bio::Phylo::Treedrawer object.
\& Alias   :
\& Returns : A Bio::Phylo::Treedrawer object.
\& Args    : none.
.Ve
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_format()\fR" 4
.IX Item "set_format()"
Sets image format.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_format
\& Usage   : $treedrawer->set_format('Svg');
\& Function: Sets the drawer submodule.
\& Returns :
\& Args    : Name of an image format
.Ve
.IP "\fIset_width()\fR" 4
.IX Item "set_width()"
Sets image width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_width
\& Usage   : $treedrawer->set_width(1000);
\& Function: sets the width of the drawer canvas.
\& Returns :
\& Args    : Integer width in pixels.
.Ve
.IP "\fIset_height()\fR" 4
.IX Item "set_height()"
Sets image height.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_height
\& Usage   : $treedrawer->set_height(1000);
\& Function: sets the height of the canvas.
\& Returns :
\& Args    : Integer height in pixels.
.Ve
.IP "\fIset_mode()\fR" 4
.IX Item "set_mode()"
Sets tree drawing mode.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_mode
\& Usage   : $treedrawer->set_mode('clado');
\& Function: Sets the tree mode, i.e. cladogram 
\&           or phylogram.
\& Returns : Invocant.
\& Args    : String, [clado|phylo]
.Ve
.IP "\fIset_shape()\fR" 4
.IX Item "set_shape()"
Sets tree drawing shape.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_shape
\& Usage   : $treedrawer->set_shape('rect');
\& Function: Sets the tree shape, i.e. 
\&           rectangular, diagonal or curvy.
\& Returns : Invocant.
\& Args    : String, [rect|diag|curvy]
.Ve
.IP "\fIset_padding()\fR" 4
.IX Item "set_padding()"
Sets image padding.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_padding
\& Usage   : $treedrawer->set_padding(100);
\& Function: Sets the canvas padding.
\& Returns :
\& Args    : Integer value in pixels.
.Ve
.IP "\fIset_text_horiz_offset()\fR" 4
.IX Item "set_text_horiz_offset()"
Sets text horizontal offset.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_text_horiz_offset
\& Usage   : $treedrawer->set_text_horiz_offset(5);
\& Function: Sets the distance between 
\&           tips and text, in pixels.
\& Returns :
\& Args    : Integer value in pixels.
.Ve
.IP "\fIset_text_vert_offset()\fR" 4
.IX Item "set_text_vert_offset()"
Sets text vertical offset.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_text_vert_offset
\& Usage   : $treedrawer->set_text_vert_offset(3);
\& Function: Sets the text baseline 
\&           relative to the tips, in pixels.
\& Returns :
\& Args    : Integer value in pixels.
.Ve
.IP "\fIset_text_width()\fR" 4
.IX Item "set_text_width()"
Sets text width.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_text_width
\& Usage   : $treedrawer->set_text_width(150);
\& Function: Sets the canvas width for 
\&           terminal taxon names.
\& Returns :
\& Args    : Integer value in pixels.
.Ve
.IP "\fIset_tree()\fR" 4
.IX Item "set_tree()"
Sets tree to draw.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_tree
\& Usage   : $treedrawer->set_tree($tree);
\& Function: Sets the Bio::Phylo::Forest::Tree 
\&           object to unparse.
\& Returns :
\& Args    : A Bio::Phylo::Forest::Tree object.
.Ve
.IP "\fIset_scale_options()\fR" 4
.IX Item "set_scale_options()"
Sets time scale options.
.Sp
.Vb 17
\& Type    : Mutator
\& Title   : set_scale_options
\& Usage   : $treedrawer->set_scale_options(
\&                -width => 400,
\&                -major => '10%', # major cross hatch interval
\&                -minor => '2%',  # minor cross hatch interval
\&                -label => 'MYA',
\&            );
\& Function: Sets the options for time (distance) scale
\& Returns :
\& Args    : -width => (if a number, like 100, pixel 
\&                      width is assumed, if a percentage, 
\&                      scale width relative to longest root
\&                      to tip path)
\&           -major => ( ditto, value for major tick marks )
\&           -minor => ( ditto, value for minor tick marks )
\&           -label => ( text string displayed next to scale )
.Ve
.Sh "\s-1CASCADING\s0 \s-1MUTATORS\s0"
.IX Subsection "CASCADING MUTATORS"
.IP "\fIset_branch_width()\fR" 4
.IX Item "set_branch_width()"
Sets branch width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_width
\& Usage   : $treedrawer->set_branch_width(1);
\& Function: sets the width of branch lines
\& Returns :
\& Args    : Integer width in pixels.
.Ve
.IP "\fIset_node_radius()\fR" 4
.IX Item "set_node_radius()"
Sets node radius.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_node_radius
\& Usage   : $treedrawer->set_node_radius(20);
\& Function: Sets the node radius in pixels.
\& Returns :
\& Args    : Integer value in pixels.
.Ve
.IP "\fIset_collapsed_clade_width()\fR" 4
.IX Item "set_collapsed_clade_width()"
Sets collapsed clade width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_collapsed_clade_width
\& Usage   : $treedrawer->set_collapsed_clade_width(6);
\& Function: sets the width of collapsed clade triangles relative to uncollapsed tips
\& Returns :
\& Args    : Positive number
.Ve
.IP "\fIset_tip_radius()\fR" 4
.IX Item "set_tip_radius()"
Sets tip radius.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_tip_radius
\& Usage   : $treedrawer->set_tip_radius(20);
\& Function: Sets the tip radius in pixels.
\& Returns :
\& Args    : Integer value in pixels.
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_format()\fR" 4
.IX Item "get_format()"
Gets image format.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_format
\& Usage   : my $format = $treedrawer->get_format;
\& Function: Gets the image format.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_width()\fR" 4
.IX Item "get_width()"
Gets image width.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_width
\& Usage   : my $width = $treedrawer->get_width;
\& Function: Gets the width of the drawer canvas.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_height()\fR" 4
.IX Item "get_height()"
Gets image height.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_height
\& Usage   : my $height = $treedrawer->get_height;
\& Function: Gets the height of the canvas.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_mode()\fR" 4
.IX Item "get_mode()"
Gets tree drawing mode.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_mode
\& Usage   : my $mode = $treedrawer->get_mode('clado');
\& Function: Gets the tree mode, i.e. cladogram or phylogram.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_shape()\fR" 4
.IX Item "get_shape()"
Gets tree drawing shape.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_shape
\& Usage   : my $shape = $treedrawer->get_shape;
\& Function: Gets the tree shape, i.e. rectangular, 
\&           diagonal or curvy.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_padding()\fR" 4
.IX Item "get_padding()"
Gets image padding.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_padding
\& Usage   : my $padding = $treedrawer->get_padding;
\& Function: Gets the canvas padding.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_text_horiz_offset()\fR" 4
.IX Item "get_text_horiz_offset()"
Gets text horizontal offset.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_text_horiz_offset
\& Usage   : my $text_horiz_offset = 
\&           $treedrawer->get_text_horiz_offset;
\& Function: Gets the distance between 
\&           tips and text, in pixels.
\& Returns : SCALAR
\& Args    : None.
.Ve
.IP "\fIget_text_vert_offset()\fR" 4
.IX Item "get_text_vert_offset()"
Gets text vertical offset.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_text_vert_offset
\& Usage   : my $text_vert_offset = 
\&           $treedrawer->get_text_vert_offset;
\& Function: Gets the text baseline relative 
\&           to the tips, in pixels.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_text_width()\fR" 4
.IX Item "get_text_width()"
Gets text width.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_text_width
\& Usage   : my $textwidth = 
\&           $treedrawer->get_text_width;
\& Function: Returns the canvas width 
\&           for terminal taxon names.
\& Returns :
\& Args    : None.
.Ve
.IP "\fIget_tree()\fR" 4
.IX Item "get_tree()"
Gets tree to draw.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_tree
\& Usage   : my $tree = $treedrawer->get_tree;
\& Function: Returns the Bio::Phylo::Forest::Tree 
\&           object to unparse.
\& Returns : A Bio::Phylo::Forest::Tree object.
\& Args    : None.
.Ve
.IP "\fIget_scale_options()\fR" 4
.IX Item "get_scale_options()"
Gets time scale option.
.Sp
.Vb 9
\& Type    : Accessor
\& Title   : get_scale_options
\& Usage   : my %options = %{ 
\&               $treedrawer->get_scale_options  
\&           };
\& Function: Returns the time/distance 
\&           scale options.
\& Returns : A hash ref.
\& Args    : None.
.Ve
.Sh "\s-1CASCADING\s0 \s-1ACCESSORS\s0"
.IX Subsection "CASCADING ACCESSORS"
.IP "\fIget_branch_width()\fR" 4
.IX Item "get_branch_width()"
Gets branch width.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_width
\& Usage   : my $w = $treedrawer->get_branch_width();
\& Function: gets the width of branch lines
\& Returns :
\& Args    : Integer width in pixels.
.Ve
.IP "\fIget_collapsed_clade_width()\fR" 4
.IX Item "get_collapsed_clade_width()"
Gets collapsed clade width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : get_collapsed_clade_width
\& Usage   : $w = $treedrawer->get_collapsed_clade_width();
\& Function: gets the width of collapsed clade triangles relative to uncollapsed tips
\& Returns : Positive number
\& Args    : None
.Ve
.IP "\fIget_node_radius()\fR" 4
.IX Item "get_node_radius()"
Gets node radius.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_node_radius
\& Usage   : my $node_radius = $treedrawer->get_node_radius;
\& Function: Gets the node radius in pixels.
\& Returns : SCALAR
\& Args    : None.
.Ve
.IP "\fIget_tip_radius()\fR" 4
.IX Item "get_tip_radius()"
Gets tip radius.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_tip_radius
\& Usage   : my $tip_radius = $treedrawer->get_tip_radius;
\& Function: Gets the tip radius in pixels.
\& Returns : SCALAR
\& Args    : None.
.Ve
.Sh "\s-1TREE\s0 \s-1DRAWING\s0"
.IX Subsection "TREE DRAWING"
.IP "\fIdraw()\fR" 4
.IX Item "draw()"
Creates tree drawing. Requires \s-1SVG\s0;
.Sp
.Vb 9
\& Type    : Unparsers
\& Title   : draw
\& Usage   : my $drawing = $treedrawer->draw;
\& Function: Unparses a Bio::Phylo::Forest::Tree 
\&           object into a drawing.
\& Returns : SCALAR
\& Args    :
\& Notes   : This will only work if you have the SVG module
\&           from CPAN installed on your system.
.Ve
.IP "\fIrender()\fR" 4
.IX Item "render()"
Renders tree based on pre-computed node coordinates. You would typically use
this method if you have passed a Bio::Phylo::Forest::DrawTree on which you
have already calculated the node coordinates separately.
.Sp
.Vb 9
\& Type    : Unparsers
\& Title   : render
\& Usage   : my $drawing = $treedrawer->render;
\& Function: Unparses a Bio::Phylo::Forest::DrawTree 
\&           object into a drawing.
\& Returns : SCALAR
\& Args    :
\& Notes   : This will only work if you have the SVG module
\&           from CPAN installed on your system.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Bio::Phylo" 4
.IX Item "Bio::Phylo"
The Bio::Phylo::Treedrawer object inherits from the Bio::Phylo object.
Look there for more methods applicable to the treedrawer object.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Treedrawer.pm 1290 2010-04-01 13:37:56Z rvos $
.Ve
