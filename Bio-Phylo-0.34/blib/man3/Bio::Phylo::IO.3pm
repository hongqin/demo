.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::IO 3"
.TH Bio::Phylo::IO 3 "2010-12-05" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::IO \- Front end for parsers and serializers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Bio::Phylo::IO qw(parse unparse);
.Ve
.PP
.Vb 6
\& # returns an unblessed array reference of block objects,
\& # i.e. taxa, matrix or forest objects
\& my $blocks = parse(
\&    '-file'   => $file,
\&    '-format' => 'nexus',
\& );
.Ve
.PP
.Vb 6
\& for my $block ( @{ $blocks } ) {
\&    if ( $block->isa('Bio::Phylo::Taxa') ) {
\&        my $taxa = $block;
\&        # do something with the taxa
\&    }
\& }
.Ve
.PP
.Vb 7
\& # returns a Bio::Phylo::Project object
\& my $project = parse(
\&        '-file'       => $file,
\&        '-format'     => 'nexus',
\&        '-as_project' => 1
\& )
\& my ($taxa) = @{ $project->get_taxa };
.Ve
.PP
.Vb 6
\& # parsing a tree from a newick string
\& my $tree_string = '(((A,B),C),D);';
\& my $tree = Bio::Phylo::IO->parse(
\&    '-string' => $tree_string,
\&    '-format' => 'newick',
\& )->first;
.Ve
.PP
.Vb 4
\& # note: newick parsers return 
\& # 'Bio::Phylo::Forest'! Call 
\& # ->first to retrieve the first 
\& # tree of the forest.
.Ve
.PP
.Vb 2
\& # prints 'Bio::Phylo::Forest::Tree'
\& print ref $tree, "\en";
.Ve
.PP
.Vb 5
\& # parsing a table
\& my $table_string = qq(A,1,2|B,1,2|C,2,2|D,2,1);
\& my $matrix = Bio::Phylo::IO->parse(
\&    '-string'   => $table_string,
\&    '-format'   => 'table',
.Ve
.PP
.Vb 2
\&    # Data type, see Bio::Phylo::Parsers::Table
\&    '-type'     => 'STANDARD',
.Ve
.PP
.Vb 2
\&    # field separator  
\&    '-fieldsep' => ',',
.Ve
.PP
.Vb 3
\&    # line separator
\&    '-linesep'  => '|'          
\& );
.Ve
.PP
.Vb 2
\& # prints 'Bio::Phylo::Matrices::Matrix'
\& print ref $matrix, "\en";
.Ve
.PP
.Vb 7
\& # parsing a list of taxa
\& my $taxa_string = 'A:B:C:D';
\& my $taxa = Bio::Phylo::IO->parse(
\&    '-string'   => $taxa_string,
\&    '-format'   => 'taxlist',
\&    '-fieldsep' => ':'
\& );
.Ve
.PP
.Vb 2
\& # prints 'Bio::Phylo::Taxa'
\& print ref $taxa, "\en";
.Ve
.PP
.Vb 2
\& # matches taxon names in tree to $taxa object
\& $tree->cross_reference($taxa);
.Ve
.PP
.Vb 2
\& # likewise for matrix  
\& $matrix->cross_reference($taxa);
.Ve
.PP
.Vb 1
\& print unparse(
.Ve
.PP
.Vb 6
\&    # pass the tree object, 
\&    # crossreferenced to taxa, which
\&    # are crossreferenced to the matrix
\&    '-phylo' => $tree,                         
\&    '-format' => 'pagel'
\& );
.Ve
.PP
.Vb 8
\& # prints a pagel data file:
\& #4 2
\& #A,n1,0.000000,1,2
\& #B,n1,0.000000,1,2
\& #n1,n2,0.000000
\& #C,n2,0.000000,2,2
\& #n2,n3,0.000000
\& #D,n3,0.000000,2,1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1IO\s0 module is the front end for parsing and serializing phylogenetic
data objects. It is a non-OO module that optionally exports the 'parse' and
\&'unparse' subroutines into the caller's namespace, using the
\&\f(CW\*(C`use Bio::Phylo::IO qw(parse unparse);\*(C'\fR directive. Alternatively, you can
call the subroutines as class methods. The \f(CW\*(C`parse\*(C'\fR and
\&\f(CW\*(C`unparse\*(C'\fR subroutines load and dispatch the appropriate sub-modules at
runtime, depending on the '\-format' argument.
.Sh "\s-1CLASS\s0 \s-1METHODS\s0"
.IX Subsection "CLASS METHODS"
.IP "\fIparse()\fR" 4
.IX Item "parse()"
Parses a file or string.
.Sp
.Vb 19
\& Type    : Class method
\& Title   : parse
\& Usage   : my $obj = Bio::Phylo::IO->parse(%options);
\& Function: Creates (file) handle, 
\&           instantiates appropriate parser.
\& Returns : A Bio::Phylo::* object
\& Args    : -file    => (path),
\&            or
\&           -string  => (scalar),
\&           -format  => (description format),
\&           -(other) => (parser specific options)
\& Comments: The parse method makes assumptions about 
\&           the capabilities of Bio::Phylo::Parsers::* 
\&           modules: i) their names match those of the
\&           -format => (blah) arguments, insofar that 
\&           ucfirst(blah) . '.pm' is an existing module; 
\&           ii) the modules implement a _from_handle, 
\&           or a _from_string method. Exceptions are 
\&           thrown if either assumption is violated.
.Ve
.Sp
.Vb 4
\&           If @ARGV contains even key/value pairs such
\&           as "format newick file <filename>" (note: no
\&           dashes) these will be prepended to @_, for
\&           one-liners.
.Ve
.IP "\fIunparse()\fR" 4
.IX Item "unparse()"
Unparses object(s) to a string.
.Sp
.Vb 11
\& Type    : Class method
\& Title   : unparse
\& Usage   : my $string = Bio::Phylo::IO->unparse(
\&               %options
\&           );
\& Function: Turns Bio::Phylo object into a 
\&           string according to specified format.
\& Returns : SCALAR
\& Args    : -phylo   => (Bio::Phylo object),
\&           -format  => (description format),
\&           -(other) => (parser specific options)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Bio::Phylo::Parsers::Fasta" 4
.IX Item "Bio::Phylo::Parsers::Fasta"
.PD 0
.IP "Bio::Phylo::Parsers::Newick" 4
.IX Item "Bio::Phylo::Parsers::Newick"
.IP "Bio::Phylo::Parsers::Nexml" 4
.IX Item "Bio::Phylo::Parsers::Nexml"
.IP "Bio::Phylo::Parsers::Nexus" 4
.IX Item "Bio::Phylo::Parsers::Nexus"
.IP "Bio::Phylo::Parsers::Phylip" 4
.IX Item "Bio::Phylo::Parsers::Phylip"
.IP "Bio::Phylo::Parsers::Phyloxml" 4
.IX Item "Bio::Phylo::Parsers::Phyloxml"
.IP "Bio::Phylo::Parsers::Table" 4
.IX Item "Bio::Phylo::Parsers::Table"
.IP "Bio::Phylo::Parsers::Taxlist" 4
.IX Item "Bio::Phylo::Parsers::Taxlist"
.IP "Bio::Phylo::Parsers::Tolweb" 4
.IX Item "Bio::Phylo::Parsers::Tolweb"
.IP "Bio::Phylo::Unparsers::Mrp" 4
.IX Item "Bio::Phylo::Unparsers::Mrp"
.IP "Bio::Phylo::Unparsers::Newick" 4
.IX Item "Bio::Phylo::Unparsers::Newick"
.IP "Bio::Phylo::Unparsers::Nexml" 4
.IX Item "Bio::Phylo::Unparsers::Nexml"
.IP "Bio::Phylo::Unparsers::Nexus" 4
.IX Item "Bio::Phylo::Unparsers::Nexus"
.IP "Bio::Phylo::Unparsers::Pagel" 4
.IX Item "Bio::Phylo::Unparsers::Pagel"
.IP "Bio::Phylo::Unparsers::Phylip" 4
.IX Item "Bio::Phylo::Unparsers::Phylip"
.IP "Bio::Phylo::Unparsers::Phyloxml" 4
.IX Item "Bio::Phylo::Unparsers::Phyloxml"
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
.PD
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: IO.pm 1544 2010-12-05 13:14:47Z rvos $
.Ve
