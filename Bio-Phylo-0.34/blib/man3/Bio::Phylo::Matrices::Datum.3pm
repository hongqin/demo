.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::Datum 3"
.TH Bio::Phylo::Matrices::Datum 3 "2010-12-02" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::Matrices::Datum \- Character state sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory->new;
.Ve
.PP
.Vb 9
\& # instantiating a datum object...
\& my $datum = $fac->create_datum(
\&    -name   => 'Tooth comb size,
\&    -type   => 'STANDARD',
\&    -desc   => 'number of teeth in lower jaw comb',
\&    -pos    => 1,
\&    -weight => 2,
\&    -char   => [ 6 ],
\& );
.Ve
.PP
.Vb 5
\& # ...and linking it to a taxon object
\& my $taxon = $fac->create_taxon(
\&     -name => 'Lemur_catta'
\& );
\& $datum->set_taxon( $taxon );
.Ve
.PP
.Vb 2
\& # instantiating a matrix...
\& my $matrix = $fac->create_matrix;
.Ve
.PP
.Vb 2
\& # ...and insert datum in matrix
\& $matrix->insert($datum);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The datum object models a single observation or a sequence of observations,
which can be linked to a taxon object.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Datum object constructor.
.Sp
.Vb 11
\& Type    : Constructor
\& Title   : new
\& Usage   : my $datum = Bio::Phylo::Matrices::Datum->new;
\& Function: Instantiates a Bio::Phylo::Matrices::Datum
\&           object.
\& Returns : A Bio::Phylo::Matrices::Datum object.
\& Args    : None required. Optional:
\&           -taxon  => $taxon,
\&           -weight => 0.234,
\&           -type   => DNA,           
\&           -pos    => 2,
.Ve
.IP "\fInew_from_bioperl()\fR" 4
.IX Item "new_from_bioperl()"
Datum constructor from Bio::Seq argument.
.Sp
.Vb 8
\& Type    : Constructor
\& Title   : new_from_bioperl
\& Usage   : my $datum = 
\&           Bio::Phylo::Matrices::Datum->new_from_bioperl($seq);
\& Function: Instantiates a 
\&           Bio::Phylo::Matrices::Datum object.
\& Returns : A Bio::Phylo::Matrices::Datum object.
\& Args    : A Bio::Seq (or similar) object
.Ve
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_weight()\fR" 4
.IX Item "set_weight()"
Sets invocant weight.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_weight
\& Usage   : $datum->set_weight($weight);
\& Function: Assigns a datum's weight.
\& Returns : Modified object.
\& Args    : The $weight argument must be a
\&           number in any of Perl's number
\&           formats.
.Ve
.IP "\fIset_char()\fR" 4
.IX Item "set_char()"
Sets character state(s)
.Sp
.Vb 18
\& Type    : Mutator
\& Title   : set_char
\& Usage   : $datum->set_char($char);
\& Function: Assigns a datum's character value.
\& Returns : Modified object.
\& Args    : The $char argument is checked against
\&           the allowed ranges for the various
\&           character types: IUPAC nucleotide (for
\&           types of DNA|RNA|NUCLEOTIDE), IUPAC
\&           single letter amino acid codes (for type
\&           PROTEIN), integers (STANDARD) or any of perl's
\&           decimal formats (CONTINUOUS). The $char can be:
\&               * a single character;
\&               * a string of characters;
\&               * an array reference of characters;
\&               * an array of characters;
\& Comments: Note that on assigning characters to a datum,
\&           previously set annotations are removed.
.Ve
.IP "\fIset_position()\fR" 4
.IX Item "set_position()"
Set invocant starting position.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_position
\& Usage   : $datum->set_position($pos);
\& Function: Assigns a datum's position.
\& Returns : Modified object.
\& Args    : $pos must be an integer.
.Ve
.IP "\fIset_annotation()\fR" 4
.IX Item "set_annotation()"
Sets single annotation.
.Sp
.Vb 15
\& Type    : Mutator
\& Title   : set_annotation
\& Usage   : $datum->set_annotation(
\&               -char       => 1,
\&               -annotation => { -codonpos => 1 }
\&           );
\& Function: Assigns an annotation to a
\&           character in the datum.
\& Returns : Modified object.
\& Args    : Required: -char       => $int
\&           Optional: -annotation => $hashref
\& Comments: Use this method to annotate
\&           a single character. To annotate
\&           multiple characters, use
\&           'set_annotations' (see below).
.Ve
.IP "\fIset_annotations()\fR" 4
.IX Item "set_annotations()"
Sets list of annotations.
.Sp
.Vb 22
\& Type    : Mutator
\& Title   : set_annotations
\& Usage   : $datum->set_annotations(
\&               { '-codonpos' => 1 },
\&               { '-codonpos' => 2 },
\&               { '-codonpos' => 3 },
\&           );
\& Function: Assign annotations to
\&           characters in the datum.
\& Returns : Modified object.
\& Args    : Hash references, where
\&           position in the argument
\&           list matches that of the
\&           specified characters in
\&           the character list. If no
\&           argument given, annotations
\&           are reset.
\& Comments: Use this method to annotate
\&           multiple characters. To
\&           annotate a single character,
\&           use 'set_annotation' (see
\&           above).
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_weight()\fR" 4
.IX Item "get_weight()"
Gets invocant weight.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_weight
\& Usage   : my $weight = $datum->get_weight;
\& Function: Retrieves a datum's weight.
\& Returns : FLOAT
\& Args    : NONE
.Ve
.IP "\fIget_char()\fR" 4
.IX Item "get_char()"
Gets characters.
.Sp
.Vb 11
\& Type    : Accessor
\& Title   : get_char
\& Usage   : my $char = $datum->get_char;
\& Function: Retrieves a datum's character value.
\& Returns : In scalar context, returns a single
\&           character, or a string of characters
\&           (e.g. a DNA sequence, or a space
\&           delimited series of continuous characters).
\&           In list context, returns a list of characters
\&           (of zero or more characters).
\& Args    : NONE
.Ve
.IP "\fIget_position()\fR" 4
.IX Item "get_position()"
Gets invocant starting position.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_position
\& Usage   : my $pos = $datum->get_position;
\& Function: Retrieves a datum's position.
\& Returns : a SCALAR integer.
\& Args    : NONE
.Ve
.IP "\fIget_annotation()\fR" 4
.IX Item "get_annotation()"
Retrieves character annotation (hashref).
.Sp
.Vb 11
\& Type    : Accessor
\& Title   : get_annotation
\& Usage   : $datum->get_annotation(
\&               '-char' => 1,
\&               '-key'  => '-codonpos',
\&           );
\& Function: Retrieves an annotation to
\&           a character in the datum.
\& Returns : SCALAR or HASH
\& Args    : Optional: -char => $int
\&           Optional: -key => $key
.Ve
.IP "\fIget_annotations()\fR" 4
.IX Item "get_annotations()"
Retrieves character annotations (array ref).
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_annotations
\& Usage   : my @anno = @{ $datum->get_annotation() };
\& Function: Retrieves annotations
\& Returns : ARRAY
\& Args    : NONE
.Ve
.IP "\fIget_length()\fR" 4
.IX Item "get_length()"
Gets invocant number of characters.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_length
\& Usage   : my $length = $datum->get_length;
\& Function: Retrieves a datum's length.
\& Returns : a SCALAR integer.
\& Args    : NONE
.Ve
.IP "\fIget_by_index()\fR" 4
.IX Item "get_by_index()"
Gets state at argument index.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_by_index
\& Usage   : my $val = $datum->get_by_index($i);
\& Function: Retrieves state at index $i.
\& Returns : a character state.
\& Args    : INT
.Ve
.IP "\fIget_index_of()\fR" 4
.IX Item "get_index_of()"
Returns the index of the first occurrence of the 
state observation in the datum or undef if the datum 
doesn't contain the argument
.Sp
.Vb 8
\& Type    : Generic query
\& Title   : get_index_of
\& Usage   : my $i = $datum->get_index_of($state)
\& Function: Returns the index of the first occurrence of the 
\&           state observation in the datum or undef if the datum 
\&                   doesn't contain the argument
\& Returns : An index or undef
\& Args    : A contained object
.Ve
.Sh "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIcan_contain()\fR" 4
.IX Item "can_contain()"
Tests if invocant can contain argument.
.Sp
.Vb 6
\& Type    : Test
\& Title   : can_contain
\& Usage   : &do_something if $datum->can_contain( @args );
\& Function: Tests if $datum can contain @args
\& Returns : BOOLEAN
\& Args    : One or more arguments as can be provided to set_char
.Ve
.Sh "\s-1CALCULATIONS\s0"
.IX Subsection "CALCULATIONS"
.IP "\fIcalc_state_counts()\fR" 4
.IX Item "calc_state_counts()"
Calculates occurrences of states.
.Sp
.Vb 6
\& Type    : Calculation
\& Title   : calc_state_counts
\& Usage   : my %counts = %{ $datum->calc_state_counts };
\& Function: Calculates occurrences of states.
\& Returns : Hashref: keys are states, values are counts
\& Args    : Optional - one or more states to focus on
.Ve
.IP "\fIcalc_state_frequencies()\fR" 4
.IX Item "calc_state_frequencies()"
Calculates the frequencies of the states observed in the matrix.
.Sp
.Vb 13
\& Type    : Calculation
\& Title   : calc_state_frequencies
\& Usage   : my %freq = %{ $object->calc_state_frequencies() };
\& Function: Calculates state frequencies
\& Returns : A hash, keys are state symbols, values are frequencies
\& Args    : Optional:
\&           # if true, counts missing (usually the '?' symbol) as a state
\&           # in the final tallies. Otherwise, missing states are ignored
\&           -missing => 1
\&           # if true, counts gaps (usually the '-' symbol) as a state
\&           # in the final tallies. Otherwise, gap states are ignored
\&           -gap => 1
\& Comments: Throws exception if matrix holds continuous values
.Ve
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fIreverse()\fR" 4
.IX Item "reverse()"
Reverses contents.
.Sp
.Vb 6
\& Type    : Method
\& Title   : reverse
\& Usage   : $datum->reverse;
\& Function: Reverses a datum's contained characters
\& Returns : Returns modified $datum
\& Args    : NONE
.Ve
.IP "\fIconcat()\fR" 4
.IX Item "concat()"
Appends argument to invocant.
.Sp
.Vb 6
\& Type    : Method
\& Title   : reverse
\& Usage   : $datum->concat($datum1);
\& Function: Appends $datum1 to $datum
\& Returns : Returns modified $datum
\& Args    : NONE
.Ve
.IP "\fIvalidate()\fR" 4
.IX Item "validate()"
Validates invocant data contents.
.Sp
.Vb 6
\& Type    : Method
\& Title   : validate
\& Usage   : $datum->validate;
\& Function: Validates character data contained by $datum
\& Returns : True or throws Bio::Phylo::Util::Exceptions::InvalidData
\& Args    : NONE
.Ve
.IP "\fIclone()\fR" 4
.IX Item "clone()"
Clones invocant.
.Sp
.Vb 7
\& Type    : Utility method
\& Title   : clone
\& Usage   : my $clone = $object->clone;
\& Function: Creates a copy of the invocant object.
\& Returns : A copy of the invocant.
\& Args    : None.
\& Comments: Cloning is currently experimental, use with caution.
.Ve
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
Serializes datum to nexml format.
.Sp
.Vb 9
\& Type    : Format convertor
\& Title   : to_xml
\& Usage   : my $xml = $datum->to_xml;
\& Function: Converts datum object into a nexml element structure.
\& Returns : Nexml block (SCALAR).
\& Args    : -chars   => [] # optional, an array ref of character IDs
\&           -states  => {} # optional, a hash ref of state IDs
\&           -symbols => {} # optional, a hash ref of symbols
\&           -special => {} # optional, a hash ref of special symbol IDs
.Ve
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
Analog to to_xml.
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $datum->to_dom
\& Function: Generates a DOM subtree from the invocant
\&           and its contained objects
\& Returns : an XML::LibXML::Element object
\& Args    : none
.Ve
.IP "\fIcopy_atts()\fR" 4
.IX Item "copy_atts()"
.Vb 1
\& Not implemented!
.Ve
.IP "\fIcomplement()\fR" 4
.IX Item "complement()"
.Vb 1
\& Not implemented!
.Ve
.IP "\fIslice()\fR" 4
.IX Item "slice()"
.Vb 1
\& Not implemented!
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Bio::Phylo::Taxa::TaxonLinker" 4
.IX Item "Bio::Phylo::Taxa::TaxonLinker"
This object inherits from Bio::Phylo::Taxa::TaxonLinker, so the methods
defined therein are also applicable to Bio::Phylo::Matrices::Datum objects.
.IP "Bio::Phylo::Matrices::TypeSafeData" 4
.IX Item "Bio::Phylo::Matrices::TypeSafeData"
This object inherits from Bio::Phylo::Matrices::TypeSafeData, so the methods
defined therein are also applicable to Bio::Phylo::Matrices::Datum objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Datum.pm 1540 2010-12-02 11:55:33Z rvos $
.Ve
