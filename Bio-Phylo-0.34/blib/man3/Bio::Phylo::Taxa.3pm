.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Taxa 3"
.TH Bio::Phylo::Taxa 3 "2010-11-25" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::Taxa \- Container of taxon objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory->new;
.Ve
.PP
.Vb 6
\& # A mesquite-style default
\& # taxa block for 10 taxa.
\& my $taxa  = $fac->create_taxa;
\& for my $i ( 1 .. 10 ) {
\&     $taxa->insert( $fac->create_taxon( '-name' => "taxon_${i}" ) );
\& }
.Ve
.PP
.Vb 2
\& # prints a taxa block in nexus format
\& print $taxa->to_nexus;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Phylo::Taxa object models a set of operational taxonomic units. The
object subclasses the Bio::Phylo::Listable object, and so the filtering
methods of that class are available.
.PP
A taxa object can link to multiple forest and matrix objects.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Taxa constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : my $taxa = Bio::Phylo::Taxa->new;
\& Function: Instantiates a Bio::Phylo::Taxa object.
\& Returns : A Bio::Phylo::Taxa object.
\& Args    : none.
.Ve
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_forest()\fR" 4
.IX Item "set_forest()"
Sets associated Bio::Phylo::Forest object.
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_forest
\& Usage   : $taxa->set_forest( $forest );
\& Function: Associates forest with the 
\&           invocant taxa object (i.e. 
\&           creates reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Forest object 
\& Comments: A taxa object can link to multiple 
\&           forest and matrix objects.
.Ve
.IP "\fIset_matrix()\fR" 4
.IX Item "set_matrix()"
Sets associated Bio::Phylo::Matrices::Matrix object.
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_matrix
\& Usage   : $taxa->set_matrix($matrix);
\& Function: Associates matrix with the 
\&           invocant taxa object (i.e. 
\&           creates reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Matrices::Matrix object
\& Comments: A taxa object can link to multiple 
\&           forest and matrix objects.
.Ve
.IP "\fIunset_forest()\fR" 4
.IX Item "unset_forest()"
Removes association with argument Bio::Phylo::Forest object.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : unset_forest
\& Usage   : $taxa->unset_forest($forest);
\& Function: Disassociates forest from the 
\&           invocant taxa object (i.e. 
\&           removes reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Forest object
.Ve
.IP "\fIunset_matrix()\fR" 4
.IX Item "unset_matrix()"
Removes association with Bio::Phylo::Matrices::Matrix object.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : unset_matrix
\& Usage   : $taxa->unset_matrix($matrix);
\& Function: Disassociates matrix from the 
\&           invocant taxa object (i.e. 
\&           removes reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Matrices::Matrix object
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_forests()\fR" 4
.IX Item "get_forests()"
Gets all associated Bio::Phylo::Forest objects.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_forests
\& Usage   : @forests = @{ $taxa->get_forests };
\& Function: Retrieves forests associated 
\&           with the current taxa object.
\& Returns : An ARRAY reference of 
\&           Bio::Phylo::Forest objects.
\& Args    : None.
.Ve
.IP "\fIget_matrices()\fR" 4
.IX Item "get_matrices()"
Gets all associated Bio::Phylo::Matrices::Matrix objects.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_matrices
\& Usage   : @matrices = @{ $taxa->get_matrices };
\& Function: Retrieves matrices associated 
\&           with the current taxa object.
\& Returns : An ARRAY reference of 
\&           Bio::Phylo::Matrices::Matrix objects.
\& Args    : None.
.Ve
.IP "\fIget_ntax()\fR" 4
.IX Item "get_ntax()"
Gets number of contained Bio::Phylo::Taxa::Taxon objects.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_ntax
\& Usage   : my $ntax = $taxa->get_ntax;
\& Function: Retrieves the number of taxa for the invocant.
\& Returns : INT
\& Args    : None.
\& Comments:
.Ve
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fImerge_by_name()\fR" 4
.IX Item "merge_by_name()"
Merges argument Bio::Phylo::Taxa object with invocant.
.Sp
.Vb 11
\& Type    : Method
\& Title   : merge_by_name
\& Usage   : $taxa->merge_by_name($other_taxa);
\& Function: Merges two taxa objects such that 
\&           internally different taxon objects 
\&           with the same name become a single
\&           object with the combined references 
\&           to datum objects and node objects 
\&           contained by the two.           
\& Returns : A merged Bio::Phylo::Taxa object.
\& Args    : A Bio::Phylo::Taxa object.
.Ve
.IP "\fIto_nexus()\fR" 4
.IX Item "to_nexus()"
Serializes invocant to nexus format.
.Sp
.Vb 7
\& Type    : Format convertor
\& Title   : to_nexus
\& Usage   : my $block = $taxa->to_nexus;
\& Function: Converts $taxa into a nexus taxa block.
\& Returns : Nexus taxa block (SCALAR).
\& Args    : -links => 1 (optional, adds 'TITLE' token)
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Bio::Phylo::Listable" 4
.IX Item "Bio::Phylo::Listable"
The Bio::Phylo::Taxa object inherits from the Bio::Phylo::Listable
object. Look there for more methods applicable to the taxa object.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Taxa.pm 1527 2010-11-25 20:49:37Z rvos $
.Ve
