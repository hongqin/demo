.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::DOM::Element 3"
.TH Bio::Phylo::NeXML::DOM::Element 3 "2010-10-22" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::NeXML::DOM::Element \- XML DOM Abstract class for
flexible document object model implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Not used directly.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module describes an abstract implementation of a \s-1DOM\s0 object as
expected by Bio::Phylo. The methods here must be overridden in any
concrete implementation. The idea is that different implementations
use a particular \s-1XML\s0 \s-1DOM\s0 package, binding the methods here to
analogous package methods.
.PP
This set of methods is intentionally minimal. The concrete instances
of this class should inherit both from ElementI and the underlying \s-1XML\s0 \s-1DOM\s0
object class, so that package-specific methods can be directly
accessed from the instantiated object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark A. Jensen \- maj \-at\- fortinbras \-dot\- us
.Sh "Constructor"
.IX Subsection "Constructor"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 8
\& Type    : Constructor
\& Title   : new
\& Usage   : $elt = Bio::Phylo::NeXML::DOM::Element->new($tag, $attr)
\& Function: Create a new XML DOM element
\& Returns : DOM element object
\& Args    : Optional: 
\&           '-tag' => $tag  - tag name as string
\&           '-attr'    => $attr - hashref of attributes/values
.Ve
.IP "\fIparse_element()\fR" 4
.IX Item "parse_element()"
.Vb 6
\& Type    : Factory method
\& Title   : parse_element
\& Usage   : $elt = $dom->parse_element($text)
\& Function: Create a new XML DOM element from XML text
\& Returns : DOM element
\& Args    : An XML String
.Ve
.Sh "Namespace accessors/mutators"
.IX Subsection "Namespace accessors/mutators"
.IP "\(bu" 4
.Vb 6
\& Type    : 
\& Title   :
\& Usage   :
\& Function:
\& Returns :
\& Args    :
.Ve
.Sh "Tagname mutators/accessors"
.IX Subsection "Tagname mutators/accessors"
.IP "\fIget_tag()\fR" 4
.IX Item "get_tag()"
.Vb 6
\& Type    : Accessor
\& Title   : get_tag
\& Usage   : $elt->get_tag()
\& Function: Get tag name
\& Returns : Tag name as scalar string
\& Args    : none
.Ve
.IP "\fIset_tag()\fR" 4
.IX Item "set_tag()"
.Vb 6
\& Type    : Mutator
\& Title   : set_tag
\& Usage   : $elt->set_tag( $tagname )
\& Function: Set tagname
\& Returns : True on success
\& Args    : Tag name as scalar string
.Ve
.Sh "Attribute mutators/accessors"
.IX Subsection "Attribute mutators/accessors"
.IP "\fIget_attributes()\fR" 4
.IX Item "get_attributes()"
.Vb 6
\& Type    : Accessor
\& Title   : get_attributes
\& Usage   : $elt->get_attributes( @attribute_names )
\& Function: Get attribute values
\& Returns : A hash ref of key/value pairs
\& Args    : Optional, [a list of] attribute name[s] as string[s]
.Ve
.IP "\fIset_attributes()\fR" 4
.IX Item "set_attributes()"
.Vb 6
\& Type    : Mutator
\& Title   : set_attributes
\& Usage   : $elt->set_attributes( @attribute_assoc_array )
\& Function: Set attribute values
\& Returns : True on success
\& Args    : An associative array of form ( $name => $value, ... )
.Ve
.IP "\fIclear_attributes()\fR" 4
.IX Item "clear_attributes()"
.Vb 6
\& Type    : Mutator
\& Title   : clear_attributes
\& Usage   : $elt->clear_attributes( @attribute_names )
\& Function: Remove attributes from element
\& Returns : Hash of removed attributes/values
\& Args    : Array of attribute names
.Ve
.Sh "Content mutators/accessors"
.IX Subsection "Content mutators/accessors"
.IP "\fIset_text()\fR" 4
.IX Item "set_text()"
.Vb 6
\& Type    : Mutator
\& Title   : set_text
\& Usage   : $elt->set_text($text_content)
\& Function: Add a #TEXT node to the element 
\& Returns : True on success
\& Args    : scalar string
.Ve
.IP "\fIget_text()\fR" 4
.IX Item "get_text()"
.Vb 6
\& Type    : Accessor
\& Title   : get_text
\& Usage   : $elt->get_text()
\& Function: Retrieve direct #TEXT descendants as (concatenated) string
\& Returns : scalar string (the text content)
\& Args    : none
.Ve
.IP "\fIclear_text()\fR" 4
.IX Item "clear_text()"
.Vb 6
\& Type    : Mutator
\& Title   : clear_text
\& Usage   : $elt->clear_text()
\& Function: Remove direct #TEXT descendant nodes from element
\& Returns : True on success; false if no #TEXT nodes removed
\& Args    : none
.Ve
.Sh "Traversal methods"
.IX Subsection "Traversal methods"
.IP "\fIget_parent()\fR" 4
.IX Item "get_parent()"
.Vb 6
\& Type    : Accessor
\& Title   : get_parent
\& Usage   : $elt->get_parent()
\& Function: Get parent DOM node of invocant 
\& Returns : Element object or undef if invocant is root
\& Args    : none
.Ve
.IP "\fIget_children()\fR" 4
.IX Item "get_children()"
.Vb 6
\& Type    : Accessor
\& Title   : get_children
\& Usage   : $elt->get_children()
\& Function: Get child nodes of invocant
\& Returns : Array ref of Elements
\& Args    : none
.Ve
.IP "\fIget_first_daughter()\fR" 4
.IX Item "get_first_daughter()"
.Vb 6
\& Type    : Accessor
\& Title   : get_first_daughter
\& Usage   : $elt->get_first_daughter()
\& Function: Get first child (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is childless
\& Args    : none
.Ve
.IP "\fIget_last_daughter()\fR" 4
.IX Item "get_last_daughter()"
.Vb 6
\& Type    : Accessor
\& Title   : get_last_daughter
\& Usage   : $elt->get_last_daughter()
\& Function: Get last child (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is childless
\& Args    : none
.Ve
.IP "\fIget_next_sister()\fR" 4
.IX Item "get_next_sister()"
.Vb 6
\& Type    : Accessor
\& Title   : get_next_sister
\& Usage   : $elt->get_next_sister()
\& Function: Gets next sibling (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is the rightmost element
\& Args    : none
.Ve
.IP "\fIget_previous_sister()\fR" 4
.IX Item "get_previous_sister()"
.Vb 6
\& Type    : Accessor
\& Title   : get_previous_sister
\& Usage   : $elt->get_previous_sister()
\& Function: Get previous sibling (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is leftmost element
\& Args    : none
.Ve
.IP "\fIget_elements_by_tagname()\fR" 4
.IX Item "get_elements_by_tagname()"
.Vb 7
\& Type    : Accessor
\& Title   : get_elements_by_tagname
\& Usage   : $elt->get_elements_by_tagname($tagname)
\& Function: Get array of elements having given tag name from invocant's 
\&           descendants
\& Returns : Array of elements or undef if no match
\& Args    : tag name as string
.Ve
.Sh "Prune and graft methods"
.IX Subsection "Prune and graft methods"
.IP "\fIset_child()\fR" 4
.IX Item "set_child()"
.Vb 6
\& Type    : Mutator
\& Title   : set_child
\& Usage   : $elt->set_child($child)
\& Function: Add child element object to invocant's descendants
\& Returns : the element object added
\& Args    : Element object
.Ve
.IP "\fIprune_child()\fR" 4
.IX Item "prune_child()"
.Vb 7
\& Type    : Mutator
\& Title   : prune_child
\& Usage   : $elt->prune_child($child)
\& Function: Remove the subtree rooted by $child from among the invocant's
\&           descendants
\& Returns : $child or undef if $child is not among the children of invocant
\& Args    : Element object
.Ve
.Sh "Output methods"
.IX Subsection "Output methods"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
.Vb 6
\& Type    : Serializer
\& Title   : to_xml
\& Usage   : $elt->to_xml
\& Function: Create XML string from subtree rooted by invocant
\& Returns : XML string
\& Args    : Formatting arguments as allowed by underlying package
.Ve
