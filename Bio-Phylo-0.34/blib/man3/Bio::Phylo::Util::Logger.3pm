.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Util::Logger 3"
.TH Bio::Phylo::Util::Logger 3 "2010-11-17" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::Util::Logger \- Logger of internal messages of several severity
levels 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use strict;
\& use Bio::Phylo::Util::Logger ':levels'; # import level constants
\& use Bio::Phylo::IO 'parse';
\& use Bio::Phylo::Factory;
.Ve
.PP
.Vb 6
\& # Set the verbosity level of the tree class.
\& # "DEBUG" is the most verbose level. All log messages
\& # emanating from the tree class will be 
\& # transmitted. For this to work the level constants
\& # have to have been imported!
\& use Bio::Phylo::Forest::Tree 'verbose' => DEBUG; # note: DEBUG is not quoted!
.Ve
.PP
.Vb 5
\& # Create a file handle for logger to write to.
\& # This is not necessary, by default the logger
\& # writes to STDERR, but sometimes you will want
\& # to write to a file, as per this example.
\& open my $fh, '>', 'parsing.log' or die $!;
.Ve
.PP
.Vb 3
\& # Create a logger object.
\& my $fac = Bio::Phylo::Factory->new;
\& my $logger = $fac->create_logger;
.Ve
.PP
.Vb 7
\& # Set the verbosity level of the set_name
\& # method in the base class. Messages coming
\& # from this method will be transmitted.
\& $logger->VERBOSE( 
\&     '-level'  => DEBUG, # note, not quoted, this is a constant!
\&     '-method' => 'Bio::Phylo::set_name', # quoted, otherwise bareword error!
\& );
.Ve
.PP
.Vb 14
\& # 'Listeners' are subroutine references that
\& # are executed when a message is transmitted.
\& # The first argument passed to these subroutines
\& # is the log message. This particular listener
\& # will write the message to the 'parsing.log'
\& # file, if the $fh file handle is still open.
\& $logger->set_listeners(
\&     sub {
\&         my ($msg) = @_;
\&         if ( $fh->opened ) {
\&             print $fh $msg;
\&         }
\&     }
\& );
.Ve
.PP
.Vb 5
\& # Now parse a tree, and see what is logged.
\& my $tree = parse( 
\&     '-format' => 'newick', 
\&     '-string' => do { local $/; <DATA> },
\& )->first;
.Ve
.PP
.Vb 2
\& # Cleanly close the log handle.
\& close $fh;
.Ve
.PP
.Vb 2
\& __DATA__
\& ((((A,B),C),D),E);
.Ve
.PP
The example above will write something like the following to the log file:
.PP
.Vb 6
\& INFO Bio::Phylo::Forest::Tree::new [$PREFIX/Bio/Phylo/Forest/Tree.pm, 99] - constructor called for 'Bio::Phylo::Forest::Tree'
\& INFO Bio::Phylo::set_name [$PREFIX/Bio/Phylo.pm, 281] - setting name 'A'
\& INFO Bio::Phylo::set_name [$PREFIX/Bio/Phylo.pm, 281] - setting name 'B'
\& INFO Bio::Phylo::set_name [$PREFIX/Bio/Phylo.pm, 281] - setting name 'C'
\& INFO Bio::Phylo::set_name [$PREFIX/Bio/Phylo.pm, 281] - setting name 'D'
\& INFO Bio::Phylo::set_name [$PREFIX/Bio/Phylo.pm, 281] - setting name 'E'
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class defines a logger, a utility object for logging messages.
The other objects in Bio::Phylo use this logger to give detailed feedback
about what they are doing at per\-class, per\-method, user-configurable log levels
(\s-1DEBUG\s0, \s-1INFO\s0, \s-1WARN\s0, \s-1ERROR\s0 and \s-1FATAL\s0). These log levels are constants that are
optionally exported by this class by passing the ':levels' argument to your
\&'use' statement, like so:
.PP
.Vb 1
\& use Bio::Phylo::Util::Logger ':levels';
.Ve
.PP
If for some reason you don't want this behaviour (i.e. because there is
something else by these same names in your namespace) you must use the fully
qualified names for these levels, i.e. Bio::Phylo::Util::Logger::DEBUG and
so on.
.PP
The least verbose is level \s-1FATAL\s0, in which case only 'fatal' messages are shown. 
The most verbose level, \s-1DEBUG\s0, shows debugging messages, including from internal 
methods (i.e. ones that start with underscores, and special '\s-1ALLCAPS\s0' perl 
methods like \s-1DESTROY\s0 or \s-1TIEARRAY\s0). For example, to monitor what the root class 
is doing, you would say:
.PP
.Vb 1
\& $logger->( -class => 'Bio::Phylo', -level => DEBUG )
.Ve
.PP
To define global verbosity you can omit the \-class argument. To set verbosity
at a more granular level, you can use the \-method argument, which takes a 
fully qualified method name such as 'Bio::Phylo::set_name', such that messages
originating from within that method's body get a different verbosity level.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Constructor for Logger.
.Sp
.Vb 7
\& Type    : Constructor
\& Title   : new
\& Usage   : my $logger = Bio::Phylo::Util::Logger->new;
\& Function: Instantiates a logger
\& Returns : a Bio::Phylo::Util::Logger object
\& Args    : -verbose => Bio::Phylo::Util::Logger::INFO (DEBUG/INFO/WARN/ERROR/FATAL)
\&           -package => a package for which to set verbosity (optional)
.Ve
.Sh "\s-1VERBOSITY\s0 \s-1LEVELS\s0"
.IX Subsection "VERBOSITY LEVELS"
.IP "\s-1FATAL\s0" 4
.IX Item "FATAL"
Rarely happens, usually an exception is thrown instead.
.IP "\s-1ERROR\s0" 4
.IX Item "ERROR"
If this happens, something is seriously wrong that needs to be addressed.
.IP "\s-1WARN\s0" 4
.IX Item "WARN"
If this happens, something is seriously wrong that needs to be addressed.
.IP "\s-1INFO\s0" 4
.IX Item "INFO"
If something weird is happening, turn up verbosity to this level as it might
explain some of the assumptions the code is making.
.IP "\s-1DEBUG\s0" 4
.IX Item "DEBUG"
This is very verbose, probably only useful if you write core Bio::Phylo code.
.Sh "\s-1LOGGING\s0 \s-1METHODS\s0"
.IX Subsection "LOGGING METHODS"
.IP "\fIlog()\fR" 4
.IX Item "log()"
Prints argument debugging message, depending on verbosity.
.Sp
.Vb 6
\& Type    : logging method
\& Title   : log
\& Usage   : $logger->log( "WARN", "warning message" );
\& Function: prints logging message, depending on verbosity
\& Returns : invocant
\& Args    : message log level, logging message
.Ve
.IP "\fIdebug()\fR" 4
.IX Item "debug()"
Prints argument debugging message, depending on verbosity.
.Sp
.Vb 6
\& Type    : logging method
\& Title   : debug
\& Usage   : $logger->debug( "debugging message" );
\& Function: prints debugging message, depending on verbosity
\& Returns : invocant
\& Args    : logging message
.Ve
.IP "\fIinfo()\fR" 4
.IX Item "info()"
Prints argument informational message, depending on verbosity.
.Sp
.Vb 6
\& Type    : logging method
\& Title   : info
\& Usage   : $logger->info( "info message" );
\& Function: prints info message, depending on verbosity
\& Returns : invocant
\& Args    : logging message
.Ve
.IP "\fIwarn()\fR" 4
.IX Item "warn()"
Prints argument warning message, depending on verbosity.
.Sp
.Vb 6
\& Type    : logging method
\& Title   : warn
\& Usage   : $logger->warn( "warning message" );
\& Function: prints warning message, depending on verbosity
\& Returns : invocant
\& Args    : logging message
.Ve
.IP "\fIerror()\fR" 4
.IX Item "error()"
Prints argument error message, depending on verbosity.
.Sp
.Vb 6
\& Type    : logging method
\& Title   : error
\& Usage   : $logger->error( "error message" );
\& Function: prints error message, depending on verbosity
\& Returns : invocant
\& Args    : logging message
.Ve
.IP "\fIfatal()\fR" 4
.IX Item "fatal()"
Prints argument fatal message, depending on verbosity.
.Sp
.Vb 6
\& Type    : logging method
\& Title   : fatal
\& Usage   : $logger->fatal( "fatal message" );
\& Function: prints fatal message, depending on verbosity
\& Returns : invocant
\& Args    : logging message
.Ve
.IP "\fIset_listeners()\fR" 4
.IX Item "set_listeners()"
Adds listeners to send log messages to.
.Sp
.Vb 13
\& Type    : Mutator
\& Title   : set_listeners()
\& Usage   : $logger->set_listeners( sub { warn shift } )
\& Function: Sets additional listeners to log to (e.g. a file)
\& Returns : invocant
\& Args    : One or more code references
\& Comments: On execution of the listeners, the @_ arguments are:
\&           $log_string, # the formatted log string
\&           $level,      # log level, i.e DEBUG, INFO, WARN, ERROR or FATAL
\&           $subroutine, # the calling subroutine
\&           $filename,   # filename where log method was called
\&           $line,       # line where log method was called
\&           $msg         # the unformatted message
.Ve
.IP "\s-1\fIPREFIX\s0()\fR" 4
.IX Item "PREFIX()"
Getter and setter of path prefix to strip from source file paths in messages.
By default, messages will have a field such as \f(CW\*(C`[$PREFIX/Bio/Phylo.pm, 280]\*(C'\fR,
which indicates the message was sent from line 280 in file Bio/Phylo.pm inside
path \f(CW$PREFIX\fR. This is done so that your log won't be cluttered with 
unnecessarily long paths. To find out what \f(CW$PREFIX\fR is set to, call the 
\&\s-1\fIPREFIX\s0()\fR method on the logger, and to change it provide a path argument 
relative to which the paths to source files will be constructed.
.Sp
.Vb 7
\& Type    : Mutator/Accessor
\& Title   : PREFIX()
\& Usage   : $logger->PREFIX( '/path/to/bio/phylo' )
\& Function: Sets/gets $PREFIX
\& Returns : Verbose level
\& Args    : Optional: a path
\& Comments:
.Ve
.IP "\s-1\fIVERBOSE\s0()\fR" 4
.IX Item "VERBOSE()"
Setter for the verbose level. This comes in five levels: 
.Sp
.Vb 2
\&        FATAL = only fatal messages (though, when something fatal happens, you'll most 
\&        likely get an exception object),
.Ve
.Sp
.Vb 1
\&        ERROR = errors (hopefully recoverable),
.Ve
.Sp
.Vb 1
\&        WARN = warnings (recoverable),
.Ve
.Sp
.Vb 1
\&        INFO = info (useful diagnostics),
.Ve
.Sp
.Vb 1
\&        DEBUG = debug (almost every method call)
.Ve
.Sp
Without additional arguments, i.e. by just calling \s-1VERBOSE\s0( \-level => \f(CW$level\fR ),
you set the global verbosity level. By default this is 2. By increasing this
level, the number of messages quickly becomes too great to make sense out of.
To focus on a particular class, you can add the \-class => 'Some::Class' 
(where 'Some::Class' stands for any of the class names in the Bio::Phylo 
release) argument, which means that messages originating from that class will 
have a different (presumably higher) verbosity level than the global level. 
By adding the \-method => 'Fully::Qualified::method_name' (say, 
\&'Bio::Phylo::set_name'), you can change the verbosity of a specific method. When
evaluating whether or not to transmit a message, the method-specific verbosity
level takes precedence over the class-specific level, which takes precedence
over the global level.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : VERBOSE()
\& Usage   : $logger->VERBOSE( -level => $level )
\& Function: Sets/gets verbose level
\& Returns : Verbose level
\& Args    : -level   => 4 # or lower
.Ve
.Sp
.Vb 2
\&           # optional, or any other class 
\&           -class   => 'Bio::Phylo'
.Ve
.Sp
.Vb 2
\&           # optional, fully qualified method name
\&           -method' => 'Bio::Phylo::set_name'
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Logger.pm 1513 2010-11-18 01:55:47Z rvos $
.Ve
