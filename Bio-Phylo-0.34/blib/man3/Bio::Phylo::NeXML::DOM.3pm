.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::DOM 3"
.TH Bio::Phylo::NeXML::DOM 3 "2010-11-16" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::NeXML::DOM \- XML DOM support for Bio::Phylo
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use Bio::Phylo::NeXML::DOM;
\& use Bio::Phylo::IO qw( parse );
\& Bio::Phylo::NeXML::DOM->new(-format => 'twig');
\& my $project = parse( -file=>'my.nex', -format=>'nexus' );
\& my $nex_twig = $project->doc();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module adds \f(CW\*(C`to_dom\*(C'\fR methods to Bio::Phylo::NeXML::Writable
classes, which provide NeXML-valid objects for document object model
manipulation. \s-1DOM\s0 formats currently available are \f(CW\*(C`XML::Twig\*(C'\fR and
\&\f(CW\*(C`XML::LibXML\*(C'\fR.  For any \f(CW\*(C`XMLWritable\*(C'\fR object, use \f(CW\*(C`to_dom\*(C'\fR in place
of \f(CW\*(C`to_xml\*(C'\fR to create \s-1DOM\s0 nodes.
.PP
The \f(CW\*(C`doc()\*(C'\fR method is also added to the \f(CW\*(C`Bio::Phylo::Project\*(C'\fR class. It
returns a NeXML document as a \s-1DOM\s0 object populated by the current contents
of the \f(CW\*(C`Bio::Phylo::Project\*(C'\fR object.
.SH "MOTIVATION"
.IX Header "MOTIVATION"
The NeXML parsing/writing capability of \f(CW\*(C`Bio::Phylo\*(C'\fR goes a long way
towards wider adoption of this useful standard.
.PP
However, while \f(CW\*(C`Bio::Phylo\*(C'\fR can write NeXML-valid \s-1XML\s0, the way in
which it does this natively is somewhat hard-coded and therefore
restricted, and is essentially oriented toward text file output. As
such, there is a mismatch between the sophisticated \f(CW\*(C`Bio::Phylo\*(C'\fR data
structure and its own ability to manipulate and serialize that
structure in sophisticated but interoperable ways. Finer manipulations
of XML-represented data are possible via through a variety of Perl
packages that can store and control \s-1XML\s0 according to a document
object model (\s-1DOM\s0). Many of these packages allow extremely flexible
computation over large datasets stored in \s-1XML\s0 format, and admit the
use of XML-related facilities such as XPath and \s-1XSLT\s0 programmatically.
.PP
The purpose of \f(CW\*(C`Bio::Phylo::NeXML::DOM\*(C'\fR is to introduce integrated \s-1DOM\s0
object creation and manipulation to \f(CW\*(C`Bio::Phylo\*(C'\fR, both to make \s-1DOM\s0
computation in \f(CW\*(C`Bio::Phylo\*(C'\fR more convenient, and also to provide a
platform for potentially more sophisticated \f(CW\*(C`Bio::Phylo\*(C'\fR modules to
come.
.SH "DESIGN"
.IX Header "DESIGN"
Besides the notion that \s-1DOM\s0 capability should be optional for the user,
there are two main design ideas. First, for each \f(CW\*(C`Bio::Phylo\*(C'\fR object
that can be parsed/written as NeXML (i.e., for each
\&\f(CW\*(C`Bio::Phylo::NeXML::Writable\*(C'\fR object), we provide analogous method
for creating a representative \s-1DOM\s0 object, or element. These elements
are aggregatable in a \s-1DOM\s0 document object, whose native stringifying
method can be used to generate valid NeXML. 
.PP
Second, we allow flexibility and extensibility in the choice of the
underlying \s-1DOM\s0 package, while maintaining a consistent \s-1DOM\s0 interface
that is similar in semantic and syntactic style to the accessors and
mutators that act on the \f(CW\*(C`Bio::Phylo\*(C'\fR objects themselves. This is
achieved through the DOM::DocumentI and DOM::ElementI interfaces,
which define a minimal subset of \s-1DOM\s0 accessors and mutators, their
inputs and outputs. Concrete instances of these interface classes
provide the bindings between the abstract methods and their
counterparts in the desired \s-1DOM\s0 implementation. Currently, there are
bindings for two popular packages, \f(CW\*(C`XML::Twig\*(C'\fR and \f(CW\*(C`XML::LibXML\*(C'\fR.
.PP
Another priority was simplicity of use; most of the details remain
under the hood in practice. The \f(CW\*(C`Bio/Phylo/Util/DOM.pm\*(C'\fR file defines the
\&\f(CW\*(C`to_dom()\*(C'\fR method for each \f(CW\*(C`XMLWritable\*(C'\fR package, as well as the
\&\f(CW\*(C`Bio::Phylo::NeXML::DOM\*(C'\fR package proper. The \f(CW\*(C`DOM\*(C'\fR object is a
factory that is used to create Element and Document objects; it is an
inside-out object that subclasses \f(CW\*(C`Bio::Phylo\*(C'\fR. To curb the
proliferation of method arguments, a \s-1DOM\s0 factory instance (set by the
latest invocation of \f(CW\*(C`Bio::Phylo::NeXML::DOM\->new()\*(C'\fR) is maintained in
a package global. This is used by default for object creation with \s-1DOM\s0
methods if a \s-1DOM\s0 factory object is not explicitly provided in the
argument list.
.PP
The underlying \s-1DOM\s0 implementation is set with the \f(CW\*(C`DOM\*(C'\fR factory
constructor's single argument, \f(CW\*(C`\-format\*(C'\fR. Even this can be left out;
the default implementation is \f(CW\*(C`XML::Twig\*(C'\fR, which is already required
by \f(CW\*(C`Bio::Phylo\*(C'\fR. Thus, for example, one can use the \s-1DOM\s0 to convert
a Nexus file to a \s-1DOM\s0 representation as follows:
.PP
.Vb 6
\& use Bio::Phylo::NeXML::DOM;
\& use Bio::Phylo::IO qw( parse );
\& Bio::Phylo::NeXML::DOM->new();
\& my $project = parse( -file=>'my.nex', -format=>'nexus' );
\& my $nex_twig =  $project->doc();
\& # The end.
.Ve
.PP
Underlying \s-1DOM\s0 packages are loaded at runtime as specified by the
\&\f(CW\*(C`\-format\*(C'\fR argument. Packages for unused formats do not need to be
installed.
.SH "INTERFACE METHODS"
.IX Header "INTERFACE METHODS"
The minimal \s-1DOM\s0 interface specifies the following methods. Details can be
obtained from the \f(CW\*(C`Element\*(C'\fR and \f(CW\*(C`Document\*(C'\fR \s-1POD\s0.
.Sh "Bio::Phylo::NeXML::DOM::Element \- \s-1DOM\s0 Element abstract class"
.IX Subsection "Bio::Phylo::NeXML::DOM::Element - DOM Element abstract class"
.Vb 8
\& get_tagname()
\& set_tagname()
\& get_attributes()
\& set_attributes()
\& clear_attributes()
\& get_text()
\& set_text()
\& clear_text()
.Ve
.PP
.Vb 7
\& get_parent()
\& get_children()
\& get_first_child()
\& get_last_child()
\& get_next_sibling()
\& get_prev_sibling()
\& get_elements_by_tagname()
.Ve
.PP
.Vb 2
\& set_child()
\& prune_child()
.Ve
.PP
.Vb 1
\& to_xml_string()
.Ve
.Sh "Bio::Phylo::NeXML::DOM::Document \- \s-1DOM\s0 Document"
.IX Subsection "Bio::Phylo::NeXML::DOM::Document - DOM Document"
.Vb 2
\& get_encoding()
\& set_encoding()
.Ve
.PP
.Vb 2
\& get_root()
\& set_root()
.Ve
.PP
.Vb 2
\& get_element_by_id()
\& get_elements_by_tagname()
.Ve
.PP
.Vb 2
\& to_xml_string()
\& to_xml_file()
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : $dom = Bio::Phylo::NeXML::DOM->new(-format=>$format)
\& Function: Create a new DOM factory
\& Returns : DOM object
\& Args    : optional: -format => DOM format (defaults to 'twig')
.Ve
.Sh "\s-1FACTORY\s0 \s-1METHODS\s0"
.IX Subsection "FACTORY METHODS"
.IP "\fIcreate_element()\fR" 4
.IX Item "create_element()"
.Vb 8
\& Type    : Factory method
\& Title   : create_element
\& Usage   : $elt = $dom->create_element()
\& Function: Create a new XML DOM element
\& Returns : DOM element
\& Args    : Optional:
\&           -tag => $tag_name
\&           -attr => \e%attr_hash
.Ve
.IP "\fIparse_element()\fR" 4
.IX Item "parse_element()"
.Vb 6
\& Type    : Factory method
\& Title   : parse_element
\& Usage   : $elt = $dom->parse_element($text)
\& Function: Create a new XML DOM element from XML text
\& Returns : DOM element
\& Args    : An XML String
.Ve
.IP "\fIcreate_document()\fR" 4
.IX Item "create_document()"
.Vb 6
\& Type    : Creator
\& Title   : create_document
\& Usage   : $doc = $dom->create_document()
\& Function: Create a new XML DOM document
\& Returns : DOM document
\& Args    : Package-specific args
.Ve
.IP "\fIparse_document()\fR" 4
.IX Item "parse_document()"
.Vb 6
\& Type    : Factory method
\& Title   : parse_document
\& Usage   : $doc = $dom->parse_document($text)
\& Function: Create a new XML DOM document from XML text
\& Returns : DOM document
\& Args    : An XML String
.Ve
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_format()\fR" 4
.IX Item "set_format()"
.Vb 6
\& Type    : Mutator
\& Title   : set_format
\& Usage   : $dom->set_format($format)
\& Function: Set the format (underlying DOM package bindings) for this object
\& Returns : format designator as string
\& Args    : format designator as string
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_format()\fR" 4
.IX Item "get_format()"
.Vb 6
\& Type    : Accessor
\& Title   : get_format
\& Usage   : $dom->get_format()
\& Function: Get the format designator for this object
\& Returns : format designator as string
\& Args    : none
.Ve
.IP "\fIget_dom()\fR" 4
.IX Item "get_dom()"
.Vb 6
\& Type    : Static accessor
\& Title   : get_dom
\& Usage   : __PACKAGE__->get_dom()
\& Function: Get the singleton DOM object
\& Returns : instance of this __PACKAGE__
\& Args    : none
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \s-1DOM\s0 creator abstract classes: Bio::Phylo::NeXML::DOM::Element,
Bio::Phylo::NeXML::DOM::Document
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark A. Jensen  (maj \-at\- fortinbras \-dot\- us), refactored by Rutger Vos
.SH "TODO"
.IX Header "TODO"
The \f(CW\*(C`Bio::Phylo::Annotation\*(C'\fR class is not yet DOMized.
