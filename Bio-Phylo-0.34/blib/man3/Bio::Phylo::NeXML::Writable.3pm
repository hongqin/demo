.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::Writable 3"
.TH Bio::Phylo::NeXML::Writable 3 "2010-12-15" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::NeXML::Writable \- Superclass for objects that serialize to NeXML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # no direct usage
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the superclass for all objects that can be serialized to NeXML 
(<http://www.nexml.org>).
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_namespaces()\fR" 4
.IX Item "set_namespaces()"
.Vb 15
\& Type    : Mutator
\& Title   : set_namespaces
\& Usage   : $obj->set_namespaces( 'dwc' => 'http://www.namespaceTBD.org/darwin2' );
\& Function: Adds one or more prefix/namespace pairs
\& Returns : $self
\& Args    : One or more prefix/namespace pairs, as even-sized list, 
\&           or as a hash reference, i.e.:
\&           $obj->set_namespaces( 'dwc' => 'http://www.namespaceTBD.org/darwin2' );
\&           or
\&           $obj->set_namespaces( { 'dwc' => 'http://www.namespaceTBD.org/darwin2' } );
\& Notes   : This is a global for the XMLWritable class, so that in a recursive
\&                   to_xml call the outermost element contains the namespace definitions.
\&                   This method can also be called as a static class method, i.e.
\&                   Bio::Phylo::NeXML::Writable->set_namespaces(
\&                   'dwc' => 'http://www.namespaceTBD.org/darwin2');
.Ve
.IP "\fIset_suppress_ns()\fR" 4
.IX Item "set_suppress_ns()"
.Vb 6
\& Type    : Mutator
\& Title   : set_suppress_ns
\& Usage   : $obj->set_suppress_ns();
\& Function: Tell this object not to write namespace attributes
\& Returns : 
\& Args    : none
.Ve
.IP "\fIclear_suppress_ns()\fR" 4
.IX Item "clear_suppress_ns()"
.Vb 6
\& Type    : Mutator
\& Title   : clear_suppress_ns
\& Usage   : $obj->clear_suppress_ns();
\& Function: Tell this object to write namespace attributes
\& Returns : 
\& Args    : none
.Ve
.IP "\fIadd_meta()\fR" 4
.IX Item "add_meta()"
.Vb 6
\& Type    : Mutator
\& Title   : add_meta
\& Usage   : $obj->add_meta($meta);
\& Function: Adds a metadata attachment to the object
\& Returns : $self
\& Args    : A Bio::Phylo::NeXML::Meta object
.Ve
.IP "\fIremove_meta()\fR" 4
.IX Item "remove_meta()"
.Vb 6
\& Type    : Mutator
\& Title   : remove_meta
\& Usage   : $obj->remove_meta($meta);
\& Function: Removes a metadata attachment from the object
\& Returns : $self
\& Args    : Bio::Phylo::NeXML::Meta
.Ve
.IP "\fIset_identifiable()\fR" 4
.IX Item "set_identifiable()"
By default, all XMLWritable objects are identifiable when serialized,
i.e. they have a unique id attribute. However, in some cases a serialized
object may not have an id attribute (governed by the nexml schema). For
such objects, id generation can be explicitly disabled using this method.
Typically, this is done internally \- you will probably never use this method.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_identifiable
\& Usage   : $obj->set_identifiable(0);
\& Function: Enables/disables id generation
\& Returns : $self
\& Args    : BOOLEAN
.Ve
.IP "\fIset_tag()\fR" 4
.IX Item "set_tag()"
This method is usually only used internally, to define or alter the
name of the tag into which the object is serialized. For example,
for a Bio::Phylo::Forest::Node object, this method would be called 
with the 'node' argument, so that the object is serialized into an
xml element structure called <node/>
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_tag
\& Usage   : $obj->set_tag('node');
\& Function: Sets the tag name
\& Returns : $self
\& Args    : A tag name (must be a valid xml element name)
.Ve
.IP "\fIset_name()\fR" 4
.IX Item "set_name()"
Sets invocant name.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_name
\& Usage   : $obj->set_name($name);
\& Function: Assigns an object's name.
\& Returns : Modified object.
\& Args    : Argument must be a string. Ensure that this string is safe to use for
\&           whatever output format you want to use (this differs between xml and
\&           nexus, for example).
.Ve
.IP "\fIset_attributes()\fR" 4
.IX Item "set_attributes()"
Assigns attributes for the element.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_attributes
\& Usage   : $obj->set_attributes( 'foo' => 'bar' )
\& Function: Sets the xml attributes for the object;
\& Returns : $self
\& Args    : key/value pairs or a hash ref
.Ve
.IP "\fIset_xml_id()\fR" 4
.IX Item "set_xml_id()"
This method is usually only used internally, to store the xml id
of an object as it is parsed out of a nexml file \- this is for
the purpose of round-tripping nexml info sets.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_xml_id
\& Usage   : $obj->set_xml_id('node345');
\& Function: Sets the xml id
\& Returns : $self
\& Args    : An xml id (must be a valid xml NCName)
.Ve
.IP "\fIunset_attribute()\fR" 4
.IX Item "unset_attribute()"
Removes specified attribute
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : unset_attribute
\& Usage   : $obj->unset_attribute( 'foo' )
\& Function: Removes the specified xml attribute for the object
\& Returns : $self
\& Args    : an attribute name
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_namespaces()\fR" 4
.IX Item "get_namespaces()"
.Vb 8
\& Type    : Accessor
\& Title   : get_namespaces
\& Usage   : my %ns = %{ $obj->get_namespaces };
\& Function: Retrieves the known namespaces
\& Returns : A hash of prefix/namespace key/value pairs, or
\&           a single namespace if a single, optional
\&           prefix was provided as argument
\& Args    : Optional - a namespace prefix
.Ve
.IP "\fIget_meta()\fR" 4
.IX Item "get_meta()"
Retrieves the metadata for the element.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_meta
\& Usage   : my @meta = @{ $obj->get_meta };
\& Function: Retrieves the metadata for the element.
\& Returns : An array ref of Bio::Phylo::NeXML::Meta objects
\& Args    : None.
.Ve
.IP "\fIget_tag()\fR" 4
.IX Item "get_tag()"
Retrieves tag name for the element.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_tag
\& Usage   : my $tag = $obj->get_tag;
\& Function: Gets the xml tag name for the object;
\& Returns : A tag name
\& Args    : None.
.Ve
.IP "\fIget_name()\fR" 4
.IX Item "get_name()"
Gets invocant's name.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_name
\& Usage   : my $name = $obj->get_name;
\& Function: Returns the object's name.
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_xml_tag()\fR" 4
.IX Item "get_xml_tag()"
Retrieves tag string
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_xml_tag
\& Usage   : my $str = $obj->get_xml_tag;
\& Function: Gets the xml tag for the object;
\& Returns : A tag, i.e. pointy brackets
\& Args    : Optional: a true value, to close an empty tag
.Ve
.IP "\fIget_attributes()\fR" 4
.IX Item "get_attributes()"
Retrieves attributes for the element.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_attributes
\& Usage   : my %attrs = %{ $obj->get_attributes };
\& Function: Gets the xml attributes for the object;
\& Returns : A hash reference
\& Args    : None.
\& Comments: throws ObjectMismatch if no linked taxa object 
\&           can be found
.Ve
.IP "\fIget_xml_id()\fR" 4
.IX Item "get_xml_id()"
Retrieves xml id for the element.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_xml_id
\& Usage   : my $id = $obj->get_xml_id;
\& Function: Gets the xml id for the object;
\& Returns : An xml id
\& Args    : None.
.Ve
.IP "\fIget_dom_elt()\fR" 4
.IX Item "get_dom_elt()"
.Vb 6
\& Type    : Serializer
\& Title   : get_dom_elt
\& Usage   : $obj->get_dom_elt
\& Function: Generates a DOM element from the invocant
\& Returns : a DOM element object (default XML::Twig)
\& Args    : DOM factory object
.Ve
.Sh "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIis_identifiable()\fR" 4
.IX Item "is_identifiable()"
By default, all XMLWritable objects are identifiable when serialized,
i.e. they have a unique id attribute. However, in some cases a serialized
object may not have an id attribute (governed by the nexml schema). This
method indicates whether that is the case.
.Sp
.Vb 6
\& Type    : Test
\& Title   : is_identifiable
\& Usage   : if ( $obj->is_identifiable ) { ... }
\& Function: Indicates whether IDs are generated
\& Returns : BOOLEAN
\& Args    : NONE
.Ve
.IP "\fIis_ns_suppressed()\fR" 4
.IX Item "is_ns_suppressed()"
.Vb 7
\& Type    : Test
\& Title   : is_ns_suppressed
\& Usage   : if ( $obj->is_ns_suppressed ) { ... }
\& Function: Indicates whether namespace attributes should not
\&           be written on XML serialization
\& Returns : BOOLEAN
\& Args    : NONE
.Ve
.Sh "\s-1CLONER\s0"
.IX Subsection "CLONER"
.IP "\fIclone()\fR" 4
.IX Item "clone()"
Clones invocant.
.Sp
.Vb 7
\& Type    : Utility method
\& Title   : clone
\& Usage   : my $clone = $object->clone;
\& Function: Creates a copy of the invocant object.
\& Returns : A copy of the invocant.
\& Args    : NONE.
\& Comments: Cloning is currently experimental, use with caution.
.Ve
.Sh "\s-1SERIALIZERS\s0"
.IX Subsection "SERIALIZERS"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
Serializes invocant to \s-1XML\s0.
.Sp
.Vb 6
\& Type    : XML serializer
\& Title   : to_xml
\& Usage   : my $xml = $obj->to_xml;
\& Function: Serializes $obj to xml
\& Returns : An xml string
\& Args    : None
.Ve
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
.Vb 10
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $obj->to_dom
\& Function: Generates a DOM subtree from the invocant and
\&           its contained objects
\& Returns : a DOM element object (default: XML::Twig flavor)
\& Args    : DOM factory object
\& Note    : This is the generic function. It is redefined in the 
\&           classes below.
\&=cut
.Ve
.Sp
.Vb 18
\&        sub to_dom {
\&                my ($self, $dom) = @_;
\&                $dom ||= Bio::Phylo::NeXML::DOM->get_dom;
\&                if ( looks_like_object $dom, _DOMCREATOR_ ) {
\&                        my $elt = $self->get_dom_elt($dom);
\&                        if ( $self->can('get_entities') ) {
\&                            for my $ent ( @{ $self->get_entities } ) {
\&                                if ( looks_like_implementor $ent,'to_dom' ) { 
\&                                        $elt->set_child( $ent->to_dom($dom) );
\&                                }
\&                            }
\&                        }
\&                        return $elt;                
\&                }
\&                else {
\&                        throw 'BadArgs' => 'DOM factory object not provided';
\&                }
\&        }
.Ve
.IP "\fIto_json()\fR" 4
.IX Item "to_json()"
Serializes object to \s-1JSON\s0 string
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_json()
\& Usage   : print $obj->to_json();
\& Function: Serializes object to JSON string
\& Returns : String 
\& Args    : None
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Writable.pm 1586 2010-12-16 00:59:38Z rvos $
.Ve
