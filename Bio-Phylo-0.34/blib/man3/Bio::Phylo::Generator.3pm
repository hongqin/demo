.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Generator 3"
.TH Bio::Phylo::Generator 3 "2010-12-10" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::Generator \- Generator of tree topologies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory->new;
\& my $gen = $fac->create_generator;
\& my $trees = $gen->gen_rand_pure_birth( 
\&     '-tips'  => 10, 
\&     '-model' => 'yule',
\&     '-trees' => 10,
\& );
.Ve
.PP
.Vb 2
\& # prints 'Bio::Phylo::Forest'
\& print ref $trees;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The generator module is used to simulate trees under various models.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Generator constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : my $gen = Bio::Phylo::Generator->new;
\& Function: Initializes a Bio::Phylo::Generator object.
\& Returns : A Bio::Phylo::Generator object.
\& Args    : NONE
.Ve
.Sh "\s-1GENERATOR\s0"
.IX Subsection "GENERATOR"
.IP "\fIgen_rand_pure_birth()\fR" 4
.IX Item "gen_rand_pure_birth()"
This method generates a Bio::Phylo::Forest 
object populated with Yule/Hey trees.
.Sp
.Vb 17
\& Type    : Generator
\& Title   : gen_rand_pure_birth
\& Usage   : my $trees = $gen->gen_rand_pure_birth(
\&               '-tips'  => 10, 
\&               '-model' => 'yule',
\&               '-trees' => 10,
\&           );
\& Function: Generates markov tree shapes, 
\&           with branch lengths sampled 
\&           from a user defined model of 
\&           clade growth, for a user defined
\&           number of tips.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : -tips  => number of terminal nodes (default: 10),
\&           -model => either 'yule' or 'hey',
\&           -trees => number of trees to generate (default: 10)
\&           Optional: -factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_rand_birth_death()\fR" 4
.IX Item "gen_rand_birth_death()"
This method generates a Bio::Phylo::Forest 
object populated under a birth/death model
.Sp
.Vb 17
\& Type    : Generator
\& Title   : gen_rand_birth_death
\& Usage   : my $trees = $gen->gen_rand_birth_death(
\&               '-tips'     => 10, 
\&               '-killrate' => 0.2,
\&               '-trees'    => 10,
\&           );
\& Function: Generates trees where any growing lineage is equally
\&           likely to split at any one time, and is equally likely
\&           to go extinct at '-killrate'
\& Returns : A Bio::Phylo::Forest object.
\& Args    : -tips  => number of terminal nodes (default: 10),
\&           -killrate => extinction over speciation rate (default: 0.2)
\&           -trees => number of trees to generate (default: 10)
\&           Optional: -factory => a Bio::Phylo::Factory object
\& Comments: Past extinction events are retained as unbranched internal
\&           nodes in the produced trees.
.Ve
.IP "\fIgen_exp_pure_birth()\fR" 4
.IX Item "gen_exp_pure_birth()"
This method generates a Bio::Phylo::Forest object 
populated with Yule/Hey trees whose branch lengths 
are proportional to the expected waiting times (i.e. 
not sampled from a distribution).
.Sp
.Vb 17
\& Type    : Generator
\& Title   : gen_exp_pure_birth
\& Usage   : my $trees = $gen->gen_exp_pure_birth(
\&               '-tips'  => 10, 
\&               '-model' => 'yule',
\&               '-trees' => 10,
\&           );
\& Function: Generates markov tree shapes, 
\&           with branch lengths following 
\&           the expectation under a user 
\&           defined model of clade growth, 
\&           for a user defined number of tips.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : -tips  => number of terminal nodes (default: 10),
\&           -model => either 'yule' or 'hey'
\&           -trees => number of trees to generate (default: 10)
\&           Optional: -factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_coalescent()\fR" 4
.IX Item "gen_coalescent()"
This method generates coalescent trees for a given effective population size
(popsize) and number of alleles (tips) such that the probability of coalescence
in the previous generation for any pair of alleles is 1 / ( 2 * popsize ).
.Sp
.Vb 13
\& Type    : Generator
\& Title   : gen_coalescent
\& Usage   : my $trees = $gen->gen_coalescent(
\&               '-tips'    => 10, 
\&               '-popsize' => 100,
\&               '-trees'   => 10,
\&           );
\& Function: Generates coalescent trees.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : -tips    => number of terminal nodes (default: 10)
\&           -popsize => effective population size (default: 100)
\&           -trees   => number of trees to generate (default: 10)
\&           Optional: -factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_equiprobable()\fR" 4
.IX Item "gen_equiprobable()"
This method draws tree shapes at random, 
such that all shapes are equally probable.
.Sp
.Vb 9
\& Type    : Generator
\& Title   : gen_equiprobable
\& Usage   : my $trees = $gen->gen_equiprobable( '-tips' => 10 );
\& Function: Generates an equiprobable tree 
\&           shape, with branch lengths = 1;
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Optional: -tips  => number of terminal nodes (default: 10),
\&           Optional: -trees => number of trees to generate (default: 1),
\&           Optional: -factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_balanced()\fR" 4
.IX Item "gen_balanced()"
This method creates the most balanced topology possible given the number of tips
.Sp
.Vb 9
\& Type    : Generator
\& Title   : gen_balanced
\& Usage   : my $trees = $gen->gen_balanced( '-tips'  => 10 );
\& Function: Generates the most balanced topology
\&           possible, with branch lengths = 1;
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Optional: -tips  => number of terminal nodes (default: 10),
\&           Optional: -trees => number of trees to generate (default: 1),
\&           Optional: -factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_ladder()\fR" 4
.IX Item "gen_ladder()"
This method creates a ladder tree for the number of tips
.Sp
.Vb 9
\& Type    : Generator
\& Title   : gen_ladder
\& Usage   : my $trees = $gen->gen_ladder( '-tips'  => 10 );
\& Function: Generates the least balanced topology
\&           (a ladder), with branch lengths = 1;
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Optional: -tips  => number of terminal nodes (default: 10),
\&           Optional: -trees => number of trees to generate (default: 1),
\&           Optional: -factory => a Bio::Phylo::Factory object
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Generator.pm 1572 2010-12-11 01:32:30Z rvos $
.Ve
