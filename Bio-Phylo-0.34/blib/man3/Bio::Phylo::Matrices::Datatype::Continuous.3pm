.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::Datatype::Continuous 3"
.TH Bio::Phylo::Matrices::Datatype::Continuous 3 "2010-03-17" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::Matrices::Datatype::Continuous \- Validator subclass,
no serviceable parts inside
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Phylo::Matrices::Datatype::* classes are used to validated data
contained by Bio::Phylo::Matrices::Matrix and Bio::Phylo::Matrices::Datum
objects.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_lookup()\fR" 4
.IX Item "set_lookup()"
Sets the lookup table (no\-op for continuous data!).
.Sp
.Vb 11
\& Type    : Mutator
\& Title   : set_lookup
\& Usage   : $obj->set_gap($hashref);
\& Function: Sets the symbol for gaps
\& Returns : Modified object.
\& Args    : Argument must be a hash
\&           reference that maps allowed
\&           single character symbols
\&           (including ambiguity symbols)
\&           onto the equivalent set of
\&           non-ambiguous symbols
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_lookup()\fR" 4
.IX Item "get_lookup()"
Gets the lookup table (no\-op for continuous data!).
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_lookup
\& Usage   : my $lookup = $obj->get_lookup;
\& Function: Returns the object's lookup hash
\& Returns : A hash reference
\& Args    : None
.Ve
.Sh "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIis_valid()\fR" 4
.IX Item "is_valid()"
Validates arguments for data validity.
.Sp
.Vb 10
\& Type    : Test
\& Title   : is_valid
\& Usage   : if ( $obj->is_valid($datum) ) {
\&              # do something
\&           }
\& Function: Returns true if $datum only contains valid characters
\& Returns : BOOLEAN
\& Args    : A list of Bio::Phylo::Matrices::Datum object, and/or
\&           character array references, and/or character strings,
\&           and/or single characters
.Ve
.Sh "\s-1UTILITY\s0 \s-1METHODS\s0"
.IX Subsection "UTILITY METHODS"
.IP "\fIsplit()\fR" 4
.IX Item "split()"
Splits string of characters on whitespaces.
.Sp
.Vb 6
\& Type    : Utility method
\& Title   : split
\& Usage   : $obj->split($string)
\& Function: Splits $string into characters
\& Returns : An array reference of characters
\& Args    : A string
.Ve
.IP "\fIjoin()\fR" 4
.IX Item "join()"
Joins array ref of characters to a space-separated string.
.Sp
.Vb 6
\& Type    : Utility method
\& Title   : join
\& Usage   : $obj->join($arrayref)
\& Function: Joins $arrayref into a string
\& Returns : A string
\& Args    : An array reference
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Bio::Phylo::Matrices::Datatype" 4
.IX Item "Bio::Phylo::Matrices::Datatype"
This object inherits from Bio::Phylo::Matrices::Datatype, so the methods defined
therein are also applicable to Bio::Phylo::Matrices::Datatype::Continuous
objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Continuous.pm 1247 2010-03-04 15:47:17Z rvos $
.Ve
