.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo 3"
.TH Bio::Phylo 3 "2010-12-18" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo \- Phylogenetic analysis using perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # Actually, you would almost never use this module directly. This is 
\& # the base class for other modules.
\& use Bio::Phylo;
.Ve
.PP
.Vb 2
\& # sets global verbosity to 'error'
\& Bio::Phylo->VERBOSE( -level => Bio::Phylo::Util::Logger::ERROR );
.Ve
.PP
.Vb 5
\& # sets verbosity for forest ojects to 'debug'
\& Bio::Phylo->VERBOSE( 
\&        -level => Bio::Phylo::Util::Logger::DEBUG, 
\&        -class => 'Bio::Phylo::Forest' 
\& );
.Ve
.PP
.Vb 2
\& # prints version, including SVN revision number
\& print Bio::Phylo->VERSION;
.Ve
.PP
.Vb 2
\& # prints suggested citation
\& print Bio::Phylo->CITATION;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for the Bio::Phylo package for phylogenetic analysis using 
object-oriented perl5. In this file, methods are defined that are performed by other 
objects in the Bio::Phylo release that inherit from this base class (which you normally
wouldn't use directly).
.PP
For general information on how to use Bio::Phylo, consult the manual
(Bio::Phylo::Manual).
.PP
If you come here because you are trying to debug a problem you run into in
using Bio::Phylo, you may be interested in the \*(L"exceptions\*(R" system as discussed
in Bio::Phylo::Util::Exceptions. In addition, you may find the logging system
in Bio::Phylo::Util::Logger of use to localize problems.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
The Bio::Phylo root constructor is rarely used directly. Rather, many other 
objects in Bio::Phylo internally go up the inheritance tree to this constructor. 
The arguments shown here can therefore also be passed to any of the child 
classes' constructors, which will pass them on up the inheritance tree. Generally, 
constructors in Bio::Phylo subclasses can process as arguments all methods that 
have set_* in their names. The arguments are named for the methods, but \*(L"set_\*(R" 
has been replaced with a dash \*(L"\-\*(R", e.g. the method \*(L"set_name\*(R" becomes the 
argument \*(L"\-name\*(R" in the constructor.
.Sp
.Vb 8
\& Type    : Constructor
\& Title   : new
\& Usage   : my $phylo = Bio::Phylo->new;
\& Function: Instantiates Bio::Phylo object
\& Returns : a Bio::Phylo object 
\& Args    : Optional, any number of setters. For example,
\&                   Bio::Phylo->new( -name => $name )
\&                   will call set_name( $name ) internally
.Ve
.Sh "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_desc()\fR" 4
.IX Item "set_desc()"
Sets invocant description.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_desc
\& Usage   : $obj->set_desc($desc);
\& Function: Assigns an object's description.
\& Returns : Modified object.
\& Args    : Argument must be a string.
.Ve
.IP "\fIset_score()\fR" 4
.IX Item "set_score()"
Sets invocant score.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_score
\& Usage   : $obj->set_score($score);
\& Function: Assigns an object's numerical score.
\& Returns : Modified object.
\& Args    : Argument must be any of
\&           perl's number formats, or undefined
\&           to reset score.
.Ve
.IP "\fIset_generic()\fR" 4
.IX Item "set_generic()"
Sets generic key/value pair(s).
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_generic
\& Usage   : $obj->set_generic( %generic );
\& Function: Assigns generic key/value pairs to the invocant.
\& Returns : Modified object.
\& Args    : Valid arguments constitute:
.Ve
.Sp
.Vb 2
\&           * key/value pairs, for example:
\&             $obj->set_generic( '-lnl' => 0.87565 );
.Ve
.Sp
.Vb 2
\&           * or a hash ref, for example:
\&             $obj->set_generic( { '-lnl' => 0.87565 } );
.Ve
.Sp
.Vb 2
\&           * or nothing, to reset the stored hash, e.g.
\&                $obj->set_generic( );
.Ve
.Sh "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_nexus_name()\fR" 4
.IX Item "get_nexus_name()"
Gets invocant's name, modified to be safely used in nexus files. This means that:
.IP "*" 4
names with spaces in them that aren't 'single quoted' have their spaces replaced
with underscores
.IP "*" 4
names with any of the following characters in them are single quoted: 
 \-^*(){}[]+=;:"\e<>/,
.IP "*" 4
names with single quotes inside them (i.e. not around them) are \*(L"double quoted\*(R"
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_nexus_name
\& Usage   : my $name = $obj->get_nexus_name;
\& Function: Returns the object's name.
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_internal_name()\fR" 4
.IX Item "get_internal_name()"
Gets invocant's 'fallback' name (possibly autogenerated).
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_internal_name
\& Usage   : my $name = $obj->get_internal_name;
\& Function: Returns the object's name (if none was set, the name
\&           is a combination of the $obj's class and its UID).
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_desc()\fR" 4
.IX Item "get_desc()"
Gets invocant description.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_desc
\& Usage   : my $desc = $obj->get_desc;
\& Function: Returns the object's description (if any).
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_score()\fR" 4
.IX Item "get_score()"
Gets invocant's score.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_score
\& Usage   : my $score = $obj->get_score;
\& Function: Returns the object's numerical score (if any).
\& Returns : A number
\& Args    : None
.Ve
.IP "\fIget_generic()\fR" 4
.IX Item "get_generic()"
Gets generic hashref or hash value(s).
.Sp
.Vb 12
\& Type    : Accessor
\& Title   : get_generic
\& Usage   : my $value = $obj->get_generic($key);
\&           or
\&           my %hash = %{ $obj->get_generic() };
\& Function: Returns the object's generic data. If an
\&           argument is used, it is considered a key
\&           for which the associated value is returned.
\&           Without arguments, a reference to the whole
\&           hash is returned.
\& Returns : A string or hash reference.
\& Args    : None
.Ve
.IP "\fIget_logger()\fR" 4
.IX Item "get_logger()"
Gets a logger object.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_logger
\& Usage   : my $logger = $obj->get_logger;
\& Function: Returns a Bio::Phylo::Util::Logger object
\& Returns : Bio::Phylo::Util::Logger
\& Args    : None
.Ve
.Sh "\s-1PACKAGE\s0 \s-1METHODS\s0"
.IX Subsection "PACKAGE METHODS"
.IP "\fIget()\fR" 4
.IX Item "get()"
Attempts to execute argument string as method on invocant.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get
\& Usage   : my $treename = $tree->get('get_name');
\& Function: Alternative syntax for safely accessing
\&           any of the object data; useful for
\&           interpolating runtime $vars.
\& Returns : (context dependent)
\& Args    : a SCALAR variable, e.g. $var = 'get_name';
.Ve
.IP "\fIget_obj_by_id()\fR" 4
.IX Item "get_obj_by_id()"
Attempts to fetch an in-memory object by its \s-1UID\s0
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_obj_by_id
\& Usage   : my $obj = Bio::Phylo->get_obj_by_id($uid);
\& Function: Fetches an object from the IDPool cache
\& Returns : A Bio::Phylo object 
\& Args    : A unique id
.Ve
.IP "\fIto_string()\fR" 4
.IX Item "to_string()"
Serializes object to general purpose string
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_string()
\& Usage   : print $obj->to_string();
\& Function: Serializes object to general purpose string
\& Returns : String 
\& Args    : None
\& Comments: This is YAML
.Ve
.IP "\fIclone()\fR" 4
.IX Item "clone()"
Clones invocant.
.Sp
.Vb 7
\& Type    : Utility method
\& Title   : clone
\& Usage   : my $clone = $object->clone;
\& Function: Creates a copy of the invocant object.
\& Returns : A copy of the invocant.
\& Args    : None.
\& Comments: Cloning is currently experimental, use with caution.
.Ve
.IP "\s-1\fIVERBOSE\s0()\fR" 4
.IX Item "VERBOSE()"
Getter and setter for the verbosity level. Refer to Bio::Phylo::Util::Logger for more
info on available verbosity levels.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : VERBOSE()
\& Usage   : Bio::Phylo->VERBOSE( -level => $level )
\& Function: Sets/gets verbose level
\& Returns : Verbose level
\& Args    : -level => $level
\& Comments:
.Ve
.IP "\s-1\fICITATION\s0()\fR" 4
.IX Item "CITATION()"
Returns suggested citation.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : CITATION
\& Usage   : $phylo->CITATION;
\& Function: Returns suggested citation.
\& Returns : Returns suggested citation.
\& Args    : None
\& Comments:
.Ve
.IP "\s-1\fIVERSION\s0()\fR" 4
.IX Item "VERSION()"
Gets version number (including revision number).
.Sp
.Vb 9
\& Type    : Accessor
\& Title   : VERSION
\& Usage   : $phylo->VERSION;
\& Function: Returns version number
\&           (including SVN revision number).
\& Alias   :
\& Returns : SCALAR
\& Args    : NONE
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "REVISION"
.IX Header "REVISION"
.Vb 1
\& $Id: Phylo.pm 1588 2010-12-18 10:57:23Z rvos $
.Ve
