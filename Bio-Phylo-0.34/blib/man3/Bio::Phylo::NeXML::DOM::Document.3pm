.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::DOM::Document 3"
.TH Bio::Phylo::NeXML::DOM::Document 3 "2010-10-22" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phylo::NeXML::DOM::Document \- XML DOM Abstract class for
flexible document object model implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Not used directly.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module describes an abstract implementation of a \s-1DOM\s0 document as
expected by Bio::Phylo. The methods here must be overridden in any
concrete implementation. The idea is that different implementations
use a particular \s-1XML\s0 \s-1DOM\s0 package, binding the methods here to
analogous package methods.
.PP
This set of methods is intentionally minimal. The concrete instances
of this class should inherit both from DocumentI and the underlying \s-1XML\s0 \s-1DOM\s0
object class, so that package-specific methods can be directly
accessed from the instantiated object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark A. Jensen \- maj \-at\- fortinbras \-dot\- us
.Sh "Constructor"
.IX Subsection "Constructor"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : $doc = Bio::Phylo::NeXML::DOM::Document->new(@args)
\& Function: Create a Document object using the underlying package
\& Returns : Document object or undef on fail
\& Args    : Package-specific arguments
.Ve
.IP "\fIparse_document()\fR" 4
.IX Item "parse_document()"
.Vb 6
\& Type    : Factory method
\& Title   : parse_document
\& Usage   : $doc = $dom->parse_document($text)
\& Function: Create a new XML DOM document from XML text
\& Returns : DOM document
\& Args    : An XML String
.Ve
.Sh "Document property accessors/mutators"
.IX Subsection "Document property accessors/mutators"
.IP "\fIset_encoding()\fR" 4
.IX Item "set_encoding()"
.Vb 6
\& Type    : Mutator
\& Title   : set_encoding
\& Usage   : $doc->set_encoding($enc)
\& Function: Set encoding for document
\& Returns : True on success
\& Args    : Encoding descriptor as string
.Ve
.IP "\fIget_encoding()\fR" 4
.IX Item "get_encoding()"
.Vb 6
\& Type    : Accessor
\& Title   : get_encoding
\& Usage   : $doc->get_encoding()
\& Function: Get encoding for document
\& Returns : Encoding descriptor as string
\& Args    : none
.Ve
.IP "\fIset_root()\fR" 4
.IX Item "set_root()"
.Vb 6
\& Type    : Mutator
\& Title   : set_root
\& Usage   : $doc->set_root($elt)
\& Function: Set the document's root element
\& Returns : True on success
\& Args    : Element object
.Ve
.IP "\fIget_root()\fR" 4
.IX Item "get_root()"
.Vb 6
\& Type    : Accessor
\& Title   : get_root
\& Usage   : $doc->get_root()
\& Function: Get the document's root element
\& Returns : Element object or undef if DNE
\& Args    : none
.Ve
.Sh "Document element accessors"
.IX Subsection "Document element accessors"
.IP "\fIget_element_by_id()\fR" 4
.IX Item "get_element_by_id()"
.Vb 6
\& Type    : Accessor
\& Title   : get_element_by_id
\& Usage   : $doc->get_element_by_id($id)
\& Function: Get element having id $id
\& Returns : Element object or undef if DNE
\& Args    : id designator as string
.Ve
.IP "\fIget_elements_by_tagname()\fR" 4
.IX Item "get_elements_by_tagname()"
.Vb 6
\& Type    : Accessor
\& Title   : get_elements_by_tagname
\& Usage   : $elt->get_elements_by_tagname($tagname)
\& Function: Get array of elements having given tag name 
\& Returns : Array of elements or undef if no match
\& Args    : tag name as string
.Ve
.Sh "Output methods"
.IX Subsection "Output methods"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
.Vb 6
\& Type    : Serializer
\& Title   : to_xml
\& Usage   : $doc->to_xml
\& Function: Create XML string from document
\& Returns : XML string
\& Args    : Formatting arguments as allowed by underlying package
.Ve
